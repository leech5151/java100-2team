<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- DAO 객체를 자동으로 생성하려면,
     namespace의 값이 인터페이스 이름과 같아야 한다. -->
<mapper namespace="java100.app.dao.BusinessReviewDao">

    <resultMap type="businessReview" id="businessReviewMap">
        <id column="rv_no" property="reviewNo"/>
        <result column="title" property="title"/>
        <result column="conts" property="content"/>
        <result column="date" property="createDate"/>
        <result column="point" property="StarPoint"/>
        <result column="vwcnt" property="viewCount"/>
        
        <association property="registrant" javaType="member">
            <id column="m_no" property="memberNo"/>
            <result column="m_name" property="memberName"/>
        </association>
        <!-- 첨부파일 정보를 담을 수 있도록 설정한다. -->
      <!--   <collection property="files"  ofType="businessUploadFile">
            <id     column="mda_no"       property="no"/>
            <result column="file"   property="filename"/>
            <result column="bus_no"   property="businessNo"/>
        </collection> -->
        
    </resultMap>

    <select id="findAll" resultMap="businessReviewMap" parameterType="map">
         select 
	         r.rv_no,
	         r.title,
	         r.conts,
	         r.date,
	         r.point, 
	         r.vwcnt
        from bus_rv as r

        <if test="words != null">
	        <where>
	            <foreach collection="words" item="word">
	                or title like '%${word}%'
	            </foreach>
	        </where>
        </if>
        
        <!-- 정렬 조건에 따라 SQL문을 변경한다.
        order by 
        <choose>
            <when test="orderColumn == 'name' and align == 'desc'">
                name desc
            </when>
            <when test="orderColumn == 'name' and align == 'asc'">
                name asc
            </when>
            <when test="orderColumn == 'nic_name' and align == 'desc'">
                nic_name desc
            </when>
            <when test="orderColumn == 'nic_name' and align == 'asc'">
                nic_name asc
            </when>
            <when test="orderColumn == 'email' and align == 'desc'">
                email desc
            </when>
            <when test="orderColumn == 'email' and align == 'asc'">
                email asc
            </when>
            <when test="orderColumn == 'cre_date' and align == 'desc'">
                cre_date desc
            </when>
            <when test="orderColumn == 'cre_date' and align == 'asc'">
                cre_date asc
            </when>
            <otherwise>
                m_no desc
            </otherwise>
        </choose>
       
        limit #{startIndex}, #{size}-->
    </select> 
    
    <select id="countAll" resultType="int">
        select count(*) from bus
    </select>
    <insert id="insert" parameterType="businessReview"
        useGeneratedKeys="true" keyColumn="rv_no" keyProperty="reviewNo">
        insert into bus_rv(m_no,bus_no,title,conts,date)
        values(#{registrant.memberNo},#{businessNo},#{title},#{content},now())
    </insert>

  <!-- 
    <select id="findByNo" resultMap="businessMap" parameterType="int">
        select 
            b.bus_no,
		    b.ctgr,
		    b.b_name,
		    b.op_time,
		    b.cl_time,
		    b.tel,
		    b.menu,
		    b.conts,
		    b.url,
		    b.pst_no,
		    b.prm_addr,
		    b.det_addr,
		    d.mda_no,
		    d.file
		from 
		    bus as b 
		    left join bus_mda as d on b.bus_no=d.bus_no
        where b.bus_no=#{value}
    </select>
        
    <select id="findByEmailAndPassword" 
            resultMap="businessMap" parameterType="map">
            select 
        bus_no,
        d.file, 
        b_name,
        prm_addr
            from bus
            where email=#{email} and pwd=password(#{password})
    </select>
    
    <update id="update" parameterType="business">
        update bus set
            ctgr=#{category}, 
            b_name=#{businessName}, 
            op_time=#{open_time},
            cl_time=#{close_time},
            tel=#{tel}, 
            menu=#{menu}, 
            conts=#{content},
            url=#{url},
            pst_no=#{post_no},
            prm_addr=#{primary_address}, 
            det_addr=#{detail_address}
         where bus_no=#{businessNo}
    </update>

    <delete id="delete" parameterType="int">
        delete from bus
        where bus_no=#{value}
    </delete> -->
</mapper>  









